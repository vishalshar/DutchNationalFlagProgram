/*
 * The Dutch national flag problem is a computer science programming problem 
proposed by Edsger Dijkstra. The flag of the Netherlands consists of three 
colours: red, white and blue. Given balls of these three colours arranged 
randomly in a line (the actual number of balls does not matter), the task 
is to arrange them such that all balls of the same colour are together and 
their collective colour groups are in the correct order. 
 * 
 * This problem can also be viewed in terms of rearranging elements of an array. 
Suppose each of the possible elements could be classified into exactly one of 
three categories (bottom, middle, and top). For example, if all elements are 
in 0 ... 1, the bottom could be defined as elements in 0 ... 0.1 
(not including 0.1), the middle as 0.1 ... 0.3 (not including 0.3) and the top 
as 0.3 and greater. (The choice of these values illustrates that the categories 
need not be equal ranges). The problem is then to produce an array such that 
all "bottom" elements come before (have an index less than the index of) all 
"middle" elements, which come before all "top" elements.
 */

/**
 *
 * @author Vishal
 */
public class DutchFlag 
{
    public static void main(String args[])
    {
        int arr[] = {6,3,8,4,7,6,5,1,2,0,9,1};
        int pivot = 5;
        
        dutchFlag(arr, pivot);
    }
/**
 *  Algorithm is to have the top group grow down from the top of the array, 
 * the bottom group grow up from the bottom, and keep the middle group just 
 * above the bottom. The algorithm indexes three locations, the bottom of the 
 * top group, the top of the bottom group, and the top of the middle group. 
 * Elements that are yet to be sorted fall between the middle and the top group.
 * At each step, examine the element just above the middle. If it belongs to the 
 * top group, swap it with the element just below the top. If it belongs in the 
 * bottom, swap it with the element just above the bottom. If it is in the 
 * middle, leave it. Update the appropriate index. Complexity is Î˜(n) moves 
 * and examinations.
 */
    public static void dutchFlag(int arr[], int pivot)
    {
       
        swap(arr, pivot, arr.length-1);
        
        int i=0;
        int j=0;
        int last = arr.length-1;
        
        for(int k=0;k<arr.length;k++)
        {
            if(arr[k]>arr[last])
            {
                i=k;
                j=k;
                break;
            }
            if(arr[k] == arr[last])
            {
                swap(arr,last-1,k);
                k--;
            }
        }
        
        while(j<arr.length-1)
        {
            if(arr[last]>arr[j])
            {
                swap(arr,j,i);
                i++;
            }
            
            if(arr[last] == arr[j])
            {
                swap(arr,last-1,j);
                last = last-1;
                j++;
            }
            j++;
        }
         
        for(int x=last;x<arr.length;x++)
        {
            arr=swap(arr, i, x);
            i++;
        }
        print(arr);
    }
    
    public static void print(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            System.out.println(arr[i]);
        }
        System.out.println("");
    }
    
    public static int[] swap(int arr[], int i, int j)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        return arr;
    }
}
